"""
File: ioparser.py
Author: Timo L. R. Halbesma <timo.halbesma@student.uva.nl>
Date created: Mon Apr 18, 2016 02:19 pm
Last modified: Thu Jun 30, 2016 10:47 pm

Parse output of Julius Donnert's Toycluster 2.0 IC generator.

Class Gadget2BinaryF77UnformattedType2Parser
    - Parse unformatted Fortran 77 binary file of Gadget-2 type 2.
    - File to parse contains IC file written by Toycluster 2.0
Class Toycluster2RuntimeOutputParser
    - Parse Toycluster 2.0 runtime output
    - Can eat raw output of Sun Grid Engine (qsub); the footer is ignored.
"""

from collections import OrderedDict

import numpy

from amuse.units import units


# Gadget2BinaryF77UnformattedType2Parser helper functions
def read_block(f, fmt="int8"):
    """ Read Fortran 77 unformatted block """
    # First block: header (new in Gadget2 filetype)
    length = numpy.fromfile(f, dtype=numpy.uint32, count=1)
    content = numpy.fromfile(f, dtype=fmt, count=length)
    end_length = numpy.fromfile(f, dtype=numpy.uint32, count=1)

    if end_length != length:
        print "error: blocklengths differ"
        return None
    return content


def get_blockname(block):
    """ Get Fortran 77 unformatted header block name,
        translate ascii values to string """
    # TODO: this code could probably be written way more elegent
    name = ""
    for char in block:
        if 65 <= char <= 90:
            name += chr(char)
        else:
            break
    return name


# Toycluster2RuntimeOutputParser helper functions
def unit_str_to_quantity(s):
    s_split = s.split(" ")
    if len(s_split) == 2:
        raw_value, unit = s_split
    elif len(s_split) == 3:
        # e.g. '100000 10^10 MSol'
        raw_value, factor, unit = s_split
    try:
        # e.g. '3.08568e+21 cm'
        value, power = raw_value.split("e")
        value = float(value) * 10**int(power)
    except ValueError as e:
        # Has no "e+" throws "need more than 1 value to unpack"
        if e.message != "need more than 1 value to unpack":
            raise
        # print "Warning! ValueError", e, "occurred for unit:", raw_value, unit
        value = float(raw_value)
    if unit == "cm":
        return units.cm(value)
    elif unit == "sec":
        return units.s(value)
    elif unit == "g":
        return units.g(value)
    elif unit == "cm/s":
        return value | units.cm/units.g
    elif unit == "g/cm^3":
        return value | units.g/units.cm**3
    elif unit == "erg":
        return units.erg(value)
    elif unit == "kpc":
        return units.kpc(value)
    elif unit == "km/s":
        return value | units.km/units.s
    elif unit == "MSol" or unit == "Msol":
        if factor != "10^10":
            raise ValueError("incorrect mass factor parsed. value={0}, factor={1}, unit={2}"\
                .format(value, factor, unit))
        code_unit_mass = 1e10
        return units.MSun(value * code_unit_mass)
    else:
        print "Error: Unit not defined. Add it :-)"
        raise ValueError("unknown unit given. value={0}, factor={1}, unit={2}"\
            .format(value, factor, unit))


class Gadget2BinaryF77UnformattedType2Parser(object):
    """
    Parse unformatted Fortran 77 binary file of Gadget-2 type 2.
    File to parse contains IC file written by Toycluster 2.0

    Based on Springel's read_snapshot_single.pro, but in Python.
    Useful documentation for porting IDL script to Python:
        - http://www.harrisgeospatial.com/docs/fltarr.html
        - http://www.harrisgeospatial.com/docs/idl_ese_datatypes.html

    Tested only with Dr. Donnert's Toycluster 2.0 output (IC-file),
    git commit b5dbfddf8848bab26b8cc5337dc95af1e0164326 with some changes.
    Makefile:
        DZERO_ENERGY_ORBIT_FRACTION=0.0; no substructure; compiler=icc
    cluster.par:
        Bfld values set to 0
    """
    def __init__(self, filename):
        print "Parsing ICs generated by Toycluster 2.0\n"

        with open(filename, "rb") as f:
            self.read_ic(f)

    def read_header(self, f):
        """ First block is the header. See Gadget-2 user guide for details. """
        # TODO: store these data in a dictionary instead of instance attributes
        blocklength = numpy.fromfile(f, dtype=numpy.uint32, count=1)

        # TODO: Implement as single fromfile with dtype/count array?
        self.npart = numpy.fromfile(f, dtype=numpy.uint32, count=6)
        self.massarr = numpy.fromfile(f, dtype=numpy.float64, count=6)
        self.time = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.redshift = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.flag_sfr = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused in public version of GADGET-2
        self.flag_feedback = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
        self.npartTotal = numpy.fromfile(f, dtype=numpy.int32, count=6)
        self.flag_cooling = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]
        self.numFiles = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]
        self.boxSize = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.omega0 = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.omegalambda = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.hubbleParam = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
        self.flag_age = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
        self.flag_metals = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
        self.numpart_total_hw = numpy.fromfile(f, dtype=numpy.int32, count=6)  # unused

        bytesleft = 256-6*4 - 6*8 - 8 - 8 - 2*4-6*4 - 4 - 4 - 8 - 8 - 8 - 8 - 4 - 4 - 6*4
        self.la = numpy.fromfile(f, dtype=numpy.uint16, count=bytesleft/2)

        blocklength_end = numpy.fromfile(f, dtype="uint32", count=1)
        # print blocklength_end
        if blocklength != blocklength_end:
            print "error: blocklengths differ"

    def read_ic(self, f):
        """
            See Gadget-2 user guide for details. The data blocks are:
            Header
            Block 0 (Coordinates)
            Block 1 (Velocities)
            Block 2 (ParticleIDs)
            Block 3 (Density)         <-- gas only
            Block 4 (Model Density)   <-- gas only (not in Gadget snaps)
            Block 5 (SmoothingLength) <-- gas only
            Block 6 (InternalEnergy)  <-- gas only
            Block 7 (MagneticField)   <-- gas only (not in Gadget snaps)
            TODO: implement for Gadget and Toycluster
            NB for (hacked!) Toycluster output...
            Header
            Block 0 (Coordinates)
            Block 1 (Velocities)
            Block 2 (ParticleIDs)
            Block 3 (InternalEnergy)  <-- gas only
            Block 4 (Density)         <-- gas only
            Block 5 (SmoothingLength) <-- gas only
        """
        content = read_block(f)
        if get_blockname(content) == "HEAD":
            self.read_header(f)

        self.N = numpy.sum(self.npart)
        self.Ngas = self.npart[0]
        self.Ndm = self.npart[1]

        # TODO: shove this into a loop, e.g. while end of file not is reached
        # read block, check blockname, call correct function to parse block
        # now this is in the order the blocks were written but other gadget2 files might differ.
        content = read_block(f)
        #  TODO: just read N bytes because we know the blocklength as it is written in the file
        # afterwards we can get the correct numbers because we know the datatype for a given attribute
        print "First block", get_blockname(content)
        if get_blockname(content) == "POS":
            content = read_block(f)
            # https://stackoverflow.com/questions/23377274
            self.pos = numpy.empty((self.N, 3), dtype="float32")
            tmppos = numpy.frombuffer(content, dtype="float32", count=self.pos.size)
            self.pos = numpy.reshape(tmppos, self.pos.shape)

        content = read_block(f)
        print "Second block", get_blockname(content)
        if get_blockname(content) == "VEL":
            content = read_block(f)
            self.vel = numpy.empty((self.N, 3), dtype="float32")
            tmpvel = numpy.frombuffer(content, dtype="float32", count=self.vel.size)
            self.vel = numpy.reshape(tmpvel, self.vel.shape)

        content = read_block(f)
        print "Third block", get_blockname(content)
        if get_blockname(content) == "ID":
            content = read_block(f)
            self.ids = numpy.frombuffer(content, dtype="uint32", count=self.N)

        # TODO: test this, because the binary file used to test does not have individual masses
        # If the particles have individual masses the next block contains the masses
        # ind = numpy.intersect1d(numpy.nonzero(self.npart), numpy.where(self.massarr == 0.0))
        # self.Nwithmass = numpy.sum(self.npart[ind])
        self.Nwithmass = 0

        if self.Nwithmass > 0:
            print "Warning: this code is untested, check output!"
            print "particles have individual mass"
            content = read_block(f)
            if get_blockname(content) == "MASS":
                content = read_block(f)
                self.mass = numpy.frombuffer(content, dtype="float32", count=self.Nwithmass)
            print "TODO: store mass with correct particle, split flat array"

        if self.Ngas > 0:
            content = read_block(f)
            # print "Seventh block", get_blockname(content)
            print "Fourth block", get_blockname(content)
            if get_blockname(content) == "U":
                content = read_block(f)
                self.u = numpy.frombuffer(content, dtype="float32", count=self.Ngas)
            content = read_block(f)

            print "Fifth block", get_blockname(content)
            if get_blockname(content) == "RHO":
                content = read_block(f)
                self.rho = numpy.frombuffer(content, dtype="float32", count=self.Ngas)

            # content = read_block(f)
            # print "Fifth block", get_blockname(content)
            # if get_blockname(content) == "RHOM":
            #     content = read_block(f)
            #     self.rhom = numpy.frombuffer(content, dtype="float32", count=self.Ngas)

            content = read_block(f)
            # print "Sixth block", get_blockname(content)
            print "Sixth block", get_blockname(content)[0:4]
            if get_blockname(content)[0:4] == "HSML":
                content = read_block(f)
                self.hsml = numpy.frombuffer(content, dtype="float32", count=self.Ngas)
            print

        # magnetic_field = False
        # if magnetic_field:
        #     content = read_block(f)
        #     mrint "Eigth block", get_blockname(content)
        #     if get_blockname(content) == "BFLD":
        #         content = read_block(f)
        #         self.bfld = numpy.frombuffer(content, dtype="float32", count=self.Ngas)

    @property
    def str_header(self):
        """ store header data in string """
        tmp = "npart: \t\t" + str(self.npart) + "\n"
        tmp += "massarr: \t" + str(self.massarr) + "\n"
        tmp += "time: \t\t" + str(self.time) + "\n"
        tmp += "redshift: \t" + str(self.redshift) + "\n"
        tmp += "flag_sfr: \t" + str(self.flag_sfr) + "\n"
        tmp += "flag_feedback: \t" + str(self.flag_feedback) + "\n"
        tmp += "npartTotal: \t" + str(self.npartTotal) + "\n"
        tmp += "flag_cooling: \t" + str(self.flag_cooling) + "\n"
        tmp += "numFiles: \t" + str(self.numFiles) + "\n"
        tmp += "boxSize: \t" + str(self.boxSize) + "\n"
        tmp += "omega0: \t" + str(self.omega0) + "\n"
        tmp += "omegalambda: \t" + str(self.omegalambda) + "\n"
        tmp += "hubbleParam: \t" + str(self.hubbleParam) + "\n"
        tmp += "flag_age: \t" + str(self.flag_age) + "\n"
        tmp += "flag_metals: \t" + str(self.flag_metals) + "\n"
        tmp += "la: \t\t" + str(self.la) + "\n"

        return tmp

    @property
    def str_particles(self):
        """ store particle data in string """
        tmp = "POS\n"
        tmp += str(self.pos[0:10]) + "\n...\n" + str(self.pos[-10:])
        tmp += "\n\nVEL\n"
        tmp += str(self.vel[0:10]) + "\n...\n" + str(self.vel[-10:])
        tmp += "\n\nID\n"
        tmp += str(self.ids[0:10]) + "\n...\n" + str(self.ids[-10:])
        tmp += "\n\nRHO\n"
        tmp += str(self.rho[0:10]) + "\n...\n" + str(self.rho[-10:])
        #tmp += "\n\nRHOM\n"
        #tmp += str(self.rhom[0:10]) + "\n...\n" + str(self.rhom[-10:])
        tmp += "\n\nHSML\n"
        tmp += str(self.hsml[0:10]) + "\n...\n" + str(self.hsml[-10:])
        tmp += "\n\nU\n"
        tmp += str(self.u[0:10]) + "\n...\n" + str(self.u[-10:])
        tmp += "\n"
        # tmp += "\n\nBFLD\n"
        # tmp += str(self.bfld[0:10]) + "\n...\n" + str(self.bfld[-10:])

        return tmp

    def __str__(self):
        tmp = self.str_header + "\n" + self.str_particles
        return tmp


class Toycluster2RuntimeOutputParser(object):
    """
    Parse Toycluster 2.0 runtime output
    Can eat raw output of Sun Grid Engine (qsub); the footer is ignored.

    This function then reads the cluster and system settings

    WARNING! The numbers have huge rounding errors due to printing .4f or so!
    """
    def __init__(self, filename):
        # print "Parsing runtime output of Toycluster 2.0"
        # print "Warning: these values have rounding errors due to printing!\n"

        # Set up dicts for different 'sections'
        self.units = dict()
        self.systemat = dict()
        self.systemsetup = dict()
        self.halosetup = dict()
        self.halosampling = dict()
        self.kinematics = dict()
        # self.halo0_sampling = dict()
        # self.halo1_sampling = dict()
        # self.halo1_sampling['i'] = None

        self.eat_file(filename)

    def eat_file(self, filename):
        """ Eat logfile, find 'sections' start indices, then eat them """
        with open(filename) as f:
            self.lines = f.readlines()

        for i, line in enumerate(self.lines):
            if line.startswith("Setting System of Units:"):
                self.units['i'] = i
            if line.startswith("System at:"):
                self.systemat['i'] = i
            for n in range(2):  # atm only using two haloes :-)
                if line.startswith("Halo Setup : <{n}>".format(**{'n':n})):
                    self.halosetup[n] = dict()
                    self.halosetup[n]['i'] = i
                # NB this is in the file twice: before and after WVT. Use last
                if line.startswith("Sampling of Halo <{n}>".format(**{'n':n})):
                    self.halosampling[0] = dict()
                    self.halosampling[0]['i'] = i
            if line.startswith("System Setup :"):
                self.systemsetup['i'] = i
            if line.startswith("Grav. Softening"):
                self.grav_softening = unit_str_to_quantity(line.split(" ~ ")[-1].strip())
            if line.startswith("Kinematics of Collision :"):
                self.kinematics['i'] = i

        self.parse_units()
        self.parse_systemat()
        self.parse_halosetup()
        self.parse_systemsetup()
        # if the mass ratio is not 0.0
        if not (-2**-14 < self.systemsetup['Mass_Ratio'] < 2**-14):
            self.parse_kinematics()
        # self.parse_halo0_sampling()

    def split(self, s):
        """ Split string 'name = value' and strip newline character. """
        return s.split(" = ")[-1].strip()

    def parse_units(self):
        """ Parse block that contains system of units. """
        lines = self.lines

        # Set Unit parameters
        i = self.units['i']
        self.units['length'] = unit_str_to_quantity(self.split(lines[i+1]))
        self.units['time'] = unit_str_to_quantity(self.split(lines[i+2]))
        self.units['mass'] = unit_str_to_quantity(self.split(lines[i+3]))
        self.units['vel'] = unit_str_to_quantity(self.split(lines[i+4]))
        self.units['density'] = unit_str_to_quantity(lines[i+5].split("= ")[-1].strip())
        self.units['energy'] = unit_str_to_quantity(self.split(lines[i+6]))

    def parse_systemat(self):
        """ Parse block with cosmological (system at) parameters. """
        lines = self.lines

        # Set System At parameters
        i = self.systemat['i']

        self.systemat['z'] = float(self.split(lines[i]))
        self.systemat['H_over_100']  = float(self.split(lines[i+1]))
        self.systemat['Omega_M']  = float(self.split(lines[i+2]))
        self.systemat['rho_crit_0']  = unit_str_to_quantity(self.split(lines[i+3]))
        self.systemat['rho_crit_z']  = unit_str_to_quantity(self.split(lines[i+4]))
        self.systemat['mean_mol_w']  = float(lines[i+5].split("= ")[-1].strip())
        self.systemat['E_of_z']  = float(self.split(lines[i+6]))
        self.systemat['Delta']  = float(self.split(lines[i+7]))

    def parse_halosetup(self):
        """ Parse block that contains halo <n> parameters """
        for n in self.halosetup.keys():
            lines = self.lines

            # Set Halo i parameters
            i = self.halosetup[n]['i']

            self.halosetup[n]['model'] = lines[i+1].split("=")[-1].strip()
            self.halosetup[n]['rgas'] = unit_str_to_quantity(lines[i+2].split("=")[-1].strip())
            self.halosetup[n]['rdm'] = unit_str_to_quantity(lines[i+3].split("=")[-1].strip())
            self.halosetup[n]['qmax'] = float(lines[i+4].split("=")[-1].strip())
            self.halosetup[n]['Mass'] = unit_str_to_quantity(lines[i+5].split("=")[-1].strip())
            self.halosetup[n]['Mass_in_DM'] = unit_str_to_quantity(lines[i+6].split("=")[-1].strip())
            self.halosetup[n]['Mass_in_gas'] = unit_str_to_quantity(lines[i+7].split("=")[-1].strip())
            self.halosetup[n]['Mass_in_R200'] = unit_str_to_quantity(lines[i+8].split("=")[-1].strip())
            self.halosetup[n]['c_nfw'] = float(lines[i+9].split("=")[-1].strip())
            self.halosetup[n]['R200'] = unit_str_to_quantity(lines[i+10].split("=")[-1].strip())
            self.halosetup[n]['a_hernquist'] = unit_str_to_quantity(lines[i+11].split("=")[-1].strip())
            self.halosetup[n]['rho0gas_cgs'] = unit_str_to_quantity(self.split(lines[i+12]))
            self.halosetup[n]['rho0gas_gadget'] = (lines[i+13].split("=")[-1].strip()).split(" ")[0]
            self.halosetup[n]['ne0gas'] = (lines[i+14].split("=")[-1].strip()).split(" ")[0]
            self.halosetup[n]['beta']  = lines[i+15].split("=")[-1].strip()
            self.halosetup[n]['rc'] = unit_str_to_quantity(lines[i+16].split("=")[-1].strip())
            self.halosetup[n]['R500'] = unit_str_to_quantity(lines[i+17].split("=")[-1].strip())
            self.halosetup[n]['bf_200'] = float(lines[i+18].split("=")[-1].strip())
            self.halosetup[n]['bf_500'] = float(lines[i+19].split("=")[-1].strip())

    def parse_systemsetup(self):
        """ Parse block that contains the system setup parameters. """
        lines = self.lines

        # Set System Setup parameters
        i = self.systemsetup['i']
        self.systemsetup['Mass_Ratio'] = float(lines[i+1].split("=")[-1].strip())
        self.systemsetup['Boxsize'] = unit_str_to_quantity(lines[i+2].split("=")[-1].strip())
        self.systemsetup['TotalMass'] = unit_str_to_quantity(lines[i+3].split("=")[-1].strip())
        self.systemsetup['Mass_in_gas'] = unit_str_to_quantity(lines[i+4].split("=")[-1].strip())
        self.systemsetup['Mass_in_DM'] = unit_str_to_quantity(lines[i+5].split("=")[-1].strip())
        self.systemsetup['Mass_Ratio'] = float(lines[i+6].split("=")[-1].strip())
        self.systemsetup['given_bf'] = float(lines[i+7].split("=")[-1].strip())
        self.systemsetup['boxwide_bf'] = float(lines[i+8].split("=")[-1].strip())
        self.systemsetup['npart'] = float(lines[i+9].split("=")[-1].strip())
        self.systemsetup['Sph_Part_mass'] = unit_str_to_quantity(lines[i+10].split("=")[-1].strip())
        self.systemsetup['DM_Part_mass'] = unit_str_to_quantity(lines[i+11].split("=")[-1].strip())
        # Warning: not in correct dataformat
        self.systemsetup['npart_partent'] = lines[i+12].split("=")[-1].strip()
        self.systemsetup['npart_bullet'] = lines[i+13].split("=")[-1].strip()
        self.systemsetup['npart_total'] = lines[i+14].split("=")[-1].strip()

    def parse_kinematics(self):
        """ Parse block with kinematics parameters """
        lines = self.lines

        # Set Kinematics parameters
        i = self.kinematics['i']
        self.kinematics['Zero-E_fraction'] = float(lines[i+1].split("=")[-1].strip())
        self.kinematics['Initial_Distance'] = unit_str_to_quantity(lines[i+2].split("=")[-1].strip())
        self.kinematics['D_CoM_0'] = unit_str_to_quantity(lines[i+3].split("=")[-1].strip())
        self.kinematics['D_CoM_1'] = unit_str_to_quantity(lines[i+4].split("=")[-1].strip())
        self.kinematics['v_CoM_0'] = unit_str_to_quantity(lines[i+5].split("=")[-1].strip())
        self.kinematics['v_CoM_1'] = unit_str_to_quantity(lines[i+6].split("=")[-1].strip())
        # Note: empty line in Toycluster output!
        self.kinematics['Impact_Parameter'] =  unit_str_to_quantity(lines[i+8].split("=")[-1].strip())
        self.kinematics['b_CoM_0'] = unit_str_to_quantity(lines[i+9].split("=")[-1].strip())
        self.kinematics['b_CoM_1'] = unit_str_to_quantity(lines[i+10].split("=")[-1].strip())

    def parse_halo0_sampling(self):
        """ Parse block with halo parameters after sph regularisation (?) """
        # TODO: store these data in a dictionary instead of instance attributes
        lines = self.lines

        # Set Halo0 sampling parameters
        i = self.halo0_sampling_i

        print "Not implemented"
        # TODO: implement this function :-)...

        #Sampling of Halo <0> (r200 = 1856.46 kpc):
        #   Gas Mass in R200    = 1.4563e+14 Msol
        #   DM Mass in R200     = 8.53783e+14 Msol
        #   Total Mass in R200  = 9.99413e+14 Msol
        #   External Gas Mass   = 5.14206e+13 Msol
        #   External DM  Mass   = 5.42529e+14 Msol
        #   Total External Mass = 5.93949e+14 Msol
        #   Effective bf in r200= 0.17057

    def __str__(self):
        # Units
        tmp = self.str_units()
        tmp += self.str_systemat()
        tmp += self.str_halosetup()
        tmp += self.str_systemsetup()
        tmp += self.str_grav_softening()
        # if the mass ratio is not 0.0
        if not (-2**-14 < self.systemsetup['Mass_Ratio'] < 2**-14):
            tmp += self.str_kinematics()
        return tmp

    def str_units(self):
        tmp = self.lines[self.units['i']].strip() + "\n"
        tmp += "    Unit Length       = " + str(self.units['length']) + "\n"
        tmp += "    Unit Time         = " + str(self.units['time']) + "\n"
        tmp += "    Unit Mass         = " + str(self.units['mass']) + "\n"
        tmp += "    Unit Vel          = " + str(self.units['vel']) + "\n"
        tmp += "    Unit Density      = " + str(self.units['density']) + "\n"
        tmp += "    Unit Energy       = " + str(self.units['energy']) + "\n\n"
        return tmp

    def str_systemat(self):
        tmp = "System at:          z = {0}".format(self.systemat['z']) + "\n"
        tmp += "   H/100              = " + str(self.systemat['H_over_100']) + "\n"
        tmp += "   Omega_M            = " + str(self.systemat['Omega_M']) + "\n"
        tmp += "   rho_crit(0)        = " + str(self.systemat['rho_crit_0']) + "\n"
        tmp += "   rho_crit(z)        = " + str(self.systemat['rho_crit_z']) + "\n"
        tmp += "   mean mol. w.       = " + str(self.systemat['mean_mol_w']) + "\n"
        tmp += "   E(z)               = " + str(self.systemat['E_of_z']) + "\n"
        tmp += "   Delta              = " + str(self.systemat['Delta']) + "\n\n"
        return tmp

    def str_halosetup(self):
        tmp = ""
        for n in sorted(self.halosetup.keys()):
            tmp += self.lines[self.halosetup[n]['i']].strip() + "\n"
            tmp += "    Model             = " + str(self.halosetup[n]['model']) + "\n"
            tmp += "    Sample Radius Gas = " + str(self.halosetup[n]['rgas']) + "\n"
            tmp += "    Sample Radius DM  = " + str(self.halosetup[n]['rdm']) + "\n"
            tmp += "    qmax              = " + str(self.halosetup[n]['qmax']) + "\n"
            tmp += "    Mass              = " + str(self.halosetup[n]['Mass']) + "\n"
            tmp += "    Mass in DM        = " + str(self.halosetup[n]['Mass_in_DM']) + "\n"
            tmp += "    Mass in Gas       = " + str(self.halosetup[n]['Mass_in_gas']) + "\n"
            tmp += "    Mass in R200      = " + str(self.halosetup[n]['Mass_in_R200']) + "\n"
            tmp += "    c_nfw             = " + str(self.halosetup[n]['c_nfw']) + "\n"
            tmp += "    R200              = " + str(self.halosetup[n]['R200']) + "\n"
            tmp += "    a_hernquist       = " + str(self.halosetup[n]['a_hernquist']) + "\n"
            tmp += "    rho0_gas          = " + str(self.halosetup[n]['rho0gas_cgs']) + "\n"
            tmp += "    rho0_gas          = " + str(self.halosetup[n]['rho0gas_gadget']) + "\n"
            tmp += "    ne0_gas           = " + str(self.halosetup[n]['ne0gas']) + "\n"
            tmp += "    beta              = " + str(self.halosetup[n]['beta']) + "\n"
            tmp += "    rc                = " + str(self.halosetup[n]['rc']) + "\n"
            tmp += "    R500              = " + str(self.halosetup[n]['R500']) + "\n"
            tmp += "    bf_200            = " + str(self.halosetup[n]['bf_200']) + "\n"
            tmp += "    bf_500            = " + str(self.halosetup[n]['bf_500']) + "\n\n"
        return tmp

    def str_systemsetup(self):
        tmp = self.lines[self.systemsetup['i']].strip() + "\n"
        tmp += "    Mass Ratio        = " + str(self.systemsetup['Mass_Ratio']) + "\n"
        tmp += "    Boxsize           = " + str(self.systemsetup['Boxsize']) + "\n"
        tmp += "    Total Mass        = " + str(self.systemsetup['TotalMass']) + "\n"
        tmp += "    Mass in Gas       = " + str(self.systemsetup['Mass_in_gas']) + "\n"
        tmp += "    Mass in DM        = " + str(self.systemsetup['Mass_in_DM']) + "\n"
        tmp += "    Mass Ratio        = " + str(self.systemsetup['Mass_Ratio']) + "\n"
        tmp += "    given bf          = " + str(self.systemsetup['given_bf']) + "\n"
        tmp += "    boxwide bf        = " + str(self.systemsetup['boxwide_bf']) + "\n"
        tmp += "    # of Particles    = " + str(self.systemsetup['npart']) + "\n"
        tmp += "    Sph Part Mass     = " + str(self.systemsetup['Sph_Part_mass']) + "\n"
        tmp += "    DM Part Mass      = " + str(self.systemsetup['DM_Part_mass']) + "\n"
        tmp += "    Npart Parent      = " + str(self.systemsetup['npart_partent']) + "\n"
        tmp += "    Npart Bullet      = " + str(self.systemsetup['npart_bullet']) + "\n"
        tmp += "    Npart Total       = " + str(self.systemsetup['npart_total']) + "\n\n"
        return tmp

    def str_grav_softening(self):
        tmp = "Grav. Softening ~ {0}\n\n".format(self.grav_softening)

        return tmp

    def str_kinematics(self):
        tmp = self.lines[self.kinematics['i']].strip() + "\n"
        tmp += "    Zero-E fraction    = " + str(self.kinematics['Zero-E_fraction']) + "\n"
        tmp += "    Initial Distance   = " + str(self.kinematics['Initial_Distance']) + "\n"
        tmp += "    CoM Distance of <0>= " + str(self.kinematics['D_CoM_0']) + "\n"
        tmp += "    CoM Distance of <1>= " + str(self.kinematics['D_CoM_1']) + "\n"
        tmp += "    CoM Velocity of <0>= " + str(self.kinematics['v_CoM_0']) + "\n"
        tmp += "    CoM Velocity of <1>= " + str(self.kinematics['v_CoM_1']) + "\n"
        tmp += "\n"
        tmp += "    Impact Parameter   = " + str(self.kinematics['Impact_Parameter']) + "\n"
        tmp += "    CoM Impact of <0>  = " + str(self.kinematics['b_CoM_0']) + "\n"
        tmp += "    CoM Impact of <1>  = " + str(self.kinematics['b_CoM_1']) + "\n\n"

        return tmp


def parse_toycluster_parms(filename):
    """ Eat toycluster parameter file, return ordered dictionary """
    parameters = OrderedDict()

    with open(filename, "r") as f:
        for line in f:
            # Ignore commented lines
            if len(line) > 1 and not line.strip().startswith("%"):
                line = line.strip().split("%")[0]  # Ignore comments in lines
                keyvaluepair = line.split()
                if keyvaluepair[0] != "Output_file":
                    parameters[keyvaluepair[0]] = float(keyvaluepair[1])
                else:
                    parameters[keyvaluepair[0]] = keyvaluepair[1]

    return parameters


def parse_gadget_parms(filename):
    parameters = OrderedDict()
    string_parms = ["InitCondFile", "OutputDir", "EnergyFile", "InfoFile",
                    "TimingsFile", "CpuFile", "RestartFile", "SnapshotFileBase",
                    "OutputListFilename", "ResubmitCommand"]

    with open(filename, "r") as f:
        for line in f:
            # Ignore commented lines
            if len(line) > 1 and not line.strip().startswith("%"):
                line = line.strip().split("%")[0]  # Ignore comments in lines
                keyvaluepair = line.split()
                if keyvaluepair[0] not in string_parms:
                    parameters[keyvaluepair[0]] = float(keyvaluepair[1])
                else:
                    parameters[keyvaluepair[0]] = keyvaluepair[1]

    return parameters


if __name__ == '__main__':
    print 80*'-'
    print "Parsing Gadget Parameter file"
    print 80*'-'
    parms = parse_gadget_parms("gadget2.par")

    for key, value in parms.items():
        print key, "=", value
    print 80*'-'

    print 80*'-'
    print "Parsing Toycluster Parameter file"
    print 80*'-'
    parms = parse_toycluster_parms("toycluster.par")

    for key, value in parms.items():
        print key, "=", value
    print 80*'-'

    print "Parsing Toycluster output: single cluster (Xm = 0)"
    print 80*'-'
    log = Toycluster2RuntimeOutputParser("../runs/test/runToycluster_single.log")
    print log
    data = Gadget2BinaryF77UnformattedType2Parser("../runs/test/IC_single_0")
    print data
    print 80*'-'

    print "Parsing Toycluster output: two clusters (Xm != 0)"
    print 80*'-'
    log = Toycluster2RuntimeOutputParser("../runs/test/runToycluster_double.log")
    print log
    data = Gadget2BinaryF77UnformattedType2Parser("../runs/test/IC_double_0")
    print data
    print 80*'-'
